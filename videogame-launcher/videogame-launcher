#!/usr/bin/env bash

#    ----------------------------------------------------------------------
#    Copyright Â© 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

_usr_get() {
  local \
    _bin
  _bin="$( \
    dirname \
      "$(command \
           -v \
	   "env")")"
  dirname \
    "${_bin}"
}

_global_variables() {
  launch_date=""
  app_id=""
  game_launcher=""
  game_platform=""
  game_lang=""
  game_settings=""
  fullscreen_enabled=""
  color=""
  quiet=""
}

_requirements() {
  true
}

_duckstation_requirements() {
  _check_cmd \
    'duckstation-nogui' \
    'duckstation'
}

_fceux_requirements() {
  _check_cmd \
    'fceux'
}

_retroarch_requirements() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    _check_cmd \
      'su' \
      'tsu'
  fi
}

_game_dir_get() {
  local \
    _app_id="${1}" \
    _dir
  _dir="$( \
    _usr_get)/games/${_app_id}"
  echo \
    "${_dir}"
}

_game_path_get() {
  local \
    _app_id="${1}" \
    _lang="${2}" \
    _game_dir \
    _path
  _game_dir="$( \
    _game_dir_get \
      "${_app_id}")"
  _path="${_game_dir}/${_lang}"
  if [ ! -f "${_path}" ]; then
    echo \
      "No support for language '${_lang}'"
    echo \
      "Running default language 'any'"
    _path="${_game_dir}/any"
  fi
  _game_path="$( \
    cat \
      "${_path}")"
}

_duckstation_launch() {
  local \
    _app_id="${1}" \
    _lang="${2}" \
    _settings="${3}" \
    _fullscreen="${4}" \
    _duckstation_opts=() \
    _game_path
  _game_path_get \
    "${_app_id}" \
    "${_lang}"
  _duckstation_opts=(
    -config
      "${_settings}"
  )
  if [[ "${_fullscreen}" == "y" ]]; then
    _duckstation_opts+=(
      -fullscreen
    )
  fi
  duckstation-nogui \
    "${_duckstation_opts[@]}" \
    "${_game_path}"
}

_retroarch_launch() {
  local \
    _app_id="${1}" \
    _platform="${2}" \
    _lang="${3}" \
    _os \
    _game_path \
    _cores_path \
    _platform_core_path \
    _cmd=()
  _os="$( \
    uname \
      -o)"
  _game_path_get \
    "${_app_id}" \
    "${_lang}"
  if [[ "${_os}" == "Android" ]]; then
    _cores_path="/data/user/0/com.retroarch/cores"
    if [[ "${_platform}" == "nes" ]]; then
      _platform_core_path="${_cores_path}/quicknes_libretro_android.so"  
    elif [[ "${_platform}" == "playstation" ]]; then
      _platform_core_path="${_cores_path}/pcsx_rearmed_libretro_android.so"  
    fi
    _cmd=(
      am
        start \
          -a
            'android.intent.action.MAIN'
          -n
            'com.retroarch/.browser.retroactivity.RetroActivityFuture'
          -e
            'ROM'
            "${_game_path}"
          -e
            'LIBRETRO'
            "${_platform_core_path}"  
    )
    su \
      -c \
        "${_cmd[*]}"
  fi
}

_fceux_launch() {
  local \
    _app_id="${1}" \
    _lang="${2}" \
    _fullscreen="${3}" \
    _game_path \
    _fceux_opts=()
  _game_path_get \
    "${_app_id}" \
    "${_lang}"
  if [[ "${_fullscreen}" == "y" ]]; then
    _fceux_opts+=(
      --fullscreen
    )
  fi
  fceux \
    "${_fceux_opts[@]}" \
    "${_game_path}"
}

_game_launcher_opts_get() {
  if [[ "${_game_launcher}" == "duckstation" ]]; then
    _launch_opts+=(
      "${_app_id}"
      "${_lang}"
      "${_settings}"
      "${_fullscreen}"
    )
  elif [[ "${_game_launcher}" == "retroarch" ]]; then
    _launch_opts+=(
      "${_app_id}"
      "${_game_platform}"
      "${_lang}"
    )
  elif [[ "${_game_launcher}" == "fceux" ]]; then
    _launch_opts+=(
      "${_app_id}"
      "${_lang}"
      "${_fullscreen}"
    )
  fi
}

_videogame_launcher() {
  local \
    _app_id="${1}" \
    _game_launcher="${2}" \
    _game_platform="${3}" \
    _lang="${4}" \
    _settings="${5}" \
    _fullscreen="${6}" \
    _launch_opts=()
  "_${_game_launcher}_requirements"
  _game_launcher_opts_get
  "_${_game_launcher}_launch" \
    "${_launch_opts[@]}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "              Launch date:   ${launch_date}"
  _msg_info "            Game launcher:   ${game_launcher}"
  _msg_info "            Game platform:   ${game_platform}"
  _msg_info "            Game language:   ${game_lang}"
  _msg_info "            Game settings:   ${game_settings}"
  _msg_info "       Fullscreen enabled:   ${fullscreen_enabled}"
}

_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Seamlessly launch videogames.

Usage:
  $(_get "app" "name")
    <app_id>

  options:
     -e <game_launcher>     It can be 'duckstation',
                            'fceux', 'retroarch'.
                            Default: ${game_launcher}
     -p <game_platform>     Game platform.
                            Default: ${game_platform}
     -l <game_lang>         Game languages.
                            Default: ${game_lang}
     -s <game_settings>     Duckstation settings file.
                            Default: ${game_settings}
     -f                     Launch the game in full-screen.
                            Default: ${fullscreen_enabled}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

_game_lang_auto_detect() {
  local \
    _uage \
    _lang
  _uage="${LANG%%.*}"
  _lang="${_uage%%_*}"
  _set_override \
    "game" \
    "lang" \
    "${_lang}"
}

_game_settings_auto_detect() {
  local \
    _app_id \
    _settings
  _app_id="$( \
    _get \
      "app" \
      "id")"
  _settings="$( \
    _usr_get)/games/${_app_id}/${_app_id}.settings.ini"
  _set_override \
    "game" \
    "settings" \
    "${_settings}"
  _set_override \
    "fullscreen" \
    "enabled" \
    "n"
}

_game_launcher_auto_detect() {
  local \
    _launcher \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    _launcher="retroarch"
  elif [[ "${_os}" == "GNU/Linux" ]]; then
    _launcher="duckstation"
  fi
  _set_override \
    "game" \
    "launcher" \
    "${_launcher}"
}

_game_platform_auto_detect() {
  local \
    _platform
  if [[ "${game_launcher}" == "duckstation" ]]; then
    _platform="playstation"
  elif [[ "${game_launcher}" == "fceux" ]]; then
    _platform="nes"
  elif [[ "${game_launcher}" == "retroarch" ]]; then
    _platform="nes"
  fi
  _set_override \
    "game" \
    "platform" \
    "${_platform}"
}

_set_overrides() {
  local \
    _app_id
  _app_id="$( \
    _get \
      "app" \
      "id")"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "launch" \
    "date" \
    "$(_get_date_human)"
  _game_launcher_auto_detect
  _game_platform_auto_detect
  _game_lang_auto_detect
  _game_settings_auto_detect
}

_globals
_global_variables
_requirements
while \
  getopts \
    'e:p:l:s:cvh?' \
    arg; do
  case \
    "${arg}" in
    e) override_game_launcher="${OPTARG}" ;;
    p) override_game_platform="${OPTARG}" ;;
    l) override_game_lang="${OPTARG}" ;;
    s) override_game_settings="${OPTARG}" ;;
    f) override_fullscreen_enabled="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "no app id given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  _set \
    "app" \
    "id" \
    "${1}"
fi
_set_overrides
_show_config
app_opts=(
  "${app_id}"
  "${game_launcher}"
  "${game_platform}"
  "${game_lang}"
  "${game_settings}"
  "${fullscreen_enabled}"
)
_videogame_launcher \
  "${app_opts[@]}"
